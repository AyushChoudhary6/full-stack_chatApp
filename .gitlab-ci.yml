stages:
  - build
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  BACKEND_IMAGE: ayushchoudhary6/chat-app-backend:$CI_COMMIT_SHORT_SHA
  FRONTEND_IMAGE: ayushchoudhary6/chat-app-frontend:$CI_COMMIT_SHORT_SHA

# -------------------------
# Build Backend Image
# -------------------------
build_backend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t $BACKEND_IMAGE ./backend
    - docker save -o backend.tar $BACKEND_IMAGE
  artifacts:
    paths:
      - backend.tar
    expire_in: 1h
  only:
    - main

# -------------------------
# Build Frontend Image
# -------------------------
build_frontend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t $FRONTEND_IMAGE ./frontend
    - docker save -o frontend.tar $FRONTEND_IMAGE
  artifacts:
    paths:
      - frontend.tar
    expire_in: 1h
  only:
    - main

# -------------------------
# Push Docker Images to Registry
# -------------------------
push_images:
  stage: push
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  dependencies:
    - build_backend
    - build_frontend
  script:
    - echo "$CI_DOCKER_PASSWORD" | docker login -u "$CI_DOCKER_USER" --password-stdin
    - docker load -i backend.tar
    - docker load -i frontend.tar
    - docker push $BACKEND_IMAGE
    - docker push $FRONTEND_IMAGE
  only:
    - main

# -------------------------
# Deploy to Kubernetes
# -------------------------
deploy:
  stage: deploy
  image: alpine:3.20
  needs: ["push_images"]
  before_script:
    - set -euo pipefail
    - apk add --no-cache curl ca-certificates bash coreutils
    # Install kubectl
    - KVER="${KUBECTL_VERSION:-$(curl -sL https://dl.k8s.io/release/stable.txt)}"
    - curl -L -o /usr/local/bin/kubectl "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl"
    - chmod +x /usr/local/bin/kubectl
    - kubectl version --client

    # Write CA cert (raw PEM, no base64)
    - printf "%s" "$KUBE_CA_PEM" > ca.pem

    # Configure kubectl
    - kubectl config set-cluster my-cluster --server="$KUBE_SERVER" --certificate-authority=ca.pem
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context gitlab --cluster=my-cluster --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context gitlab
  script:
    # Ensure namespace exists
    - kubectl get ns "$KUBE_NAMESPACE" || kubectl create ns "$KUBE_NAMESPACE"

    # Apply manifests
    - kubectl apply -f k8s/

    # Update deployments with new images
    - kubectl set image deployment/backend backend="$BACKEND_IMAGE" -n "$KUBE_NAMESPACE"
    - kubectl set image deployment/frontend frontend="$FRONTEND_IMAGE" -n "$KUBE_NAMESPACE"

    # Wait for rollout
    - kubectl rollout status deployment/backend -n "$KUBE_NAMESPACE" --timeout=180s
    - kubectl rollout status deployment/frontend -n "$KUBE_NAMESPACE" --timeout=180s
  only:
    - main
