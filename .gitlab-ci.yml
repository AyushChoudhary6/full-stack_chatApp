stages:
  - build
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  BACKEND_IMAGE: ayushchoudhary6/chat-app-backend:$CI_COMMIT_SHORT_SHA
  FRONTEND_IMAGE: ayushchoudhary6/chat-app-frontend:$CI_COMMIT_SHORT_SHA
  KUBE_CONTEXT: "gitlab-agent-cicd-pipeline:agentk"  # <project>:<agent-name>
  KUBE_NAMESPACE: "default"  # replace if you have a different namespace

# -------------------------
# Build Backend Image
# -------------------------
build_backend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t $BACKEND_IMAGE ./backend
    - docker save -o backend.tar $BACKEND_IMAGE
  artifacts:
    paths:
      - backend.tar
    expire_in: 1h
  only:
    - main

# -------------------------
# Build Frontend Image
# -------------------------
build_frontend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t $FRONTEND_IMAGE ./frontend
    - docker save -o frontend.tar $FRONTEND_IMAGE
  artifacts:
    paths:
      - frontend.tar
    expire_in: 1h
  only:
    - main

# -------------------------
# Push Docker Images to Registry
# -------------------------
push_images:
  stage: push
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  dependencies:
    - build_backend
    - build_frontend
  script:
    - echo "$CI_DOCKER_PASSWORD" | docker login -u "$CI_DOCKER_USER" --password-stdin
    - docker load -i backend.tar
    - docker load -i frontend.tar
    - docker push $BACKEND_IMAGE
    - docker push $FRONTEND_IMAGE
  only:
    - main

# -------------------------
# Deploy to Kubernetes (via GitLab Agent)
# -------------------------
deploy:
  stage: deploy
  image: google/cloud-sdk:latest  # ⚠️ shell + kubectl included
  needs: ["push_images"]
  script:
    # Ensure namespace exists
    - |
      if ! kubectl --context $KUBE_CONTEXT get ns "$KUBE_NAMESPACE"; then
        kubectl --context $KUBE_CONTEXT create ns "$KUBE_NAMESPACE"
      fi

    # Apply manifests
    - kubectl --context $KUBE_CONTEXT apply -f k8s/ -n "$KUBE_NAMESPACE"

    # Update deployments with new images
    - kubectl --context $KUBE_CONTEXT set image deployment/backend backend="$BACKEND_IMAGE" -n "$KUBE_NAMESPACE"
    - kubectl --context $KUBE_CONTEXT set image deployment/frontend frontend="$FRONTEND_IMAGE" -n "$KUBE_NAMESPACE"

    # Wait for rollout
    - kubectl --context $KUBE_CONTEXT rollout status deployment/backend -n "$KUBE_NAMESPACE" --timeout=180s
    - kubectl --context $KUBE_CONTEXT rollout status deployment/frontend -n "$KUBE_NAMESPACE" --timeout=180s
  only:
    - main
