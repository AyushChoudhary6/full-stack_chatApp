stages:
  - build
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  BACKEND_IMAGE: ayushchoudhary6/chat-app-backend:$CI_COMMIT_SHORT_SHA
  FRONTEND_IMAGE: ayushchoudhary6/chat-app-frontend:$CI_COMMIT_SHORT_SHA

# -------------------------
# Build Backend Image
# -------------------------
build_backend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t $BACKEND_IMAGE ./backend
    - docker save -o backend.tar $BACKEND_IMAGE
  artifacts:
    paths:
      - backend.tar
    expire_in: 1h
  only:
    - main

# -------------------------
# Build Frontend Image
# -------------------------
build_frontend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t $FRONTEND_IMAGE ./frontend
    - docker save -o frontend.tar $FRONTEND_IMAGE
  artifacts:
    paths:
      - frontend.tar
    expire_in: 1h
  only:
    - main

# -------------------------
# Push Docker Images to Registry
# -------------------------
push_images:
  stage: push
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  dependencies:
    - build_backend
    - build_frontend
  script:
    - echo "$CI_DOCKER_PASSWORD" | docker login -u "$CI_DOCKER_USER" --password-stdin
    - docker load -i backend.tar
    - docker load -i frontend.tar
    - docker push $BACKEND_IMAGE
    - docker push $FRONTEND_IMAGE
  only:
    - main

# -------------------------
# Deploy to Kubernetes via GitLab Agent
# -------------------------

deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  needs: ["push_images"]
  environment:
    name: production
    kubernetes:
      namespace: chat-app
  script:
    # Debug: Check kubectl configuration
    - kubectl version --client
    - kubectl config current-context || echo "No current context"
    - kubectl get nodes || echo "Cannot connect to cluster"
    
    # Create namespace if it doesn't exist
    - kubectl create namespace chat-app --dry-run=client -o yaml | kubectl apply -f -
    
    # Apply all Kubernetes manifests
    - kubectl apply -f k8s/ --recursive
    
    # Update deployment images with new tags
    - kubectl set image deployment/backend backend=$BACKEND_IMAGE -n chat-app
    - kubectl set image deployment/frontend frontend=$FRONTEND_IMAGE -n chat-app
    
    # Wait for rollout to complete
    - kubectl rollout status deployment/backend -n chat-app --timeout=300s
    - kubectl rollout status deployment/frontend -n chat-app --timeout=300s
    
    # Show final status
    - kubectl get pods -n chat-app
    - kubectl get services -n chat-app
  only:
    - main
    - main