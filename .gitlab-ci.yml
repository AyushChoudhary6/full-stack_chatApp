stages:
  - build
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  BACKEND_IMAGE: ayushchoudhary6/chat-app-backend:$CI_COMMIT_SHORT_SHA
  FRONTEND_IMAGE: ayushchoudhary6/chat-app-frontend:$CI_COMMIT_SHORT_SHA
  KUBE_CONTEXT: "gitlab-agent-cicd-pipeline:agentk"  # Replace with your <project>:<agent-name>

# -------------------------
# Build Backend Image
# -------------------------
build_backend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t $BACKEND_IMAGE ./backend
    - docker save -o backend.tar $BACKEND_IMAGE
  artifacts:
    paths:
      - backend.tar
    expire_in: 1h
  only:
    - main

# -------------------------
# Build Frontend Image
# -------------------------
build_frontend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t $FRONTEND_IMAGE ./frontend
    - docker save -o frontend.tar $FRONTEND_IMAGE
  artifacts:
    paths:
      - frontend.tar
    expire_in: 1h
  only:
    - main

# -------------------------
# Push Docker Images to Registry
# -------------------------
push_images:
  stage: push
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  dependencies:
    - build_backend
    - build_frontend
  script:
    - echo "$CI_DOCKER_PASSWORD" | docker login -u "$CI_DOCKER_USER" --password-stdin
    - docker load -i backend.tar
    - docker load -i frontend.tar
    - docker push $BACKEND_IMAGE
    - docker push $FRONTEND_IMAGE
  only:
    - main

# -------------------------
# Deploy to Kubernetes via GitLab Agent
# -------------------------
deploy:
  stage: deploy
  image: google/cloud-sdk:latest  # Includes kubectl + bash
  needs: ["push_images"]
  before_script:
    # Install yq to parse YAML
    - apt-get update && apt-get install -y python3-pip
    - pip3 install yq
  script:
    # 1️⃣ Extract namespace from backend manifest (manifest drives namespace)
    - NS=$(yq e '.metadata.namespace' k8s/backend-deployment.yml)
    - echo "Detected namespace: $NS"

    # 2️⃣ Ensure namespace exists
    - |
      if ! kubectl --context $KUBE_CONTEXT get ns "$NS" >/dev/null 2>&1; then
        echo "Namespace $NS not found. Creating..."
        kubectl --context $KUBE_CONTEXT create ns "$NS"
      else
        echo "Namespace $NS already exists."
      fi

    # 3️⃣ Apply CRDs first (if any)
    - |
      if [ -d "k8s/crds" ]; then
        kubectl --context $KUBE_CONTEXT apply -f k8s/crds/
      fi

    # 4️⃣ Wait a few seconds for namespace/CRDs to be ready
    - sleep 5

    # 5️⃣ Apply all manifests (manifest controls namespace)
    - |
      for f in k8s/*.yml; do
        if [[ "$f" != "k8s/kind-config.yml" ]]; then
          kubectl --context $KUBE_CONTEXT apply -f "$f"
        fi
      done

    # 6️⃣ Update deployments with new images
    - kubectl --context $KUBE_CONTEXT set image deployment/backend backend="$BACKEND_IMAGE" -n "$NS"
    - kubectl --context $KUBE_CONTEXT set image deployment/frontend frontend="$FRONTEND_IMAGE" -n "$NS"

    # 7️⃣ Wait for rollout
    - kubectl --context $KUBE_CONTEXT rollout status deployment/backend -n "$NS" --timeout=180s
    - kubectl --context $KUBE_CONTEXT rollout status deployment/frontend -n "$NS" --timeout=180s
  only:
    - main
